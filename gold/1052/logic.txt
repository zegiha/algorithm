시작 n개의 물병을 가짐, 물은 1씩 들어있음
한번에 k개의 물병을 옮길 수 있으며, 한번에 모든 물병을 옮겨야함
상점에서 새로운 물병을 구매할 수 있으며 제약은 없음
이런 상황에서 사야하는 물병의 최솟 값을 출력

n = 5, k = 1
1 1 1 1 1 (n = 5)
2 0 2 0 1 (n = 3)
4 0 0 0 1 (n = 2)
4 0 0 0 2 0 (n = 2)
4 0 0 0 2 1 (n = 3)
4 0 0 0 2 2 0 (n = 3)
4 0 0 0 4 0 0 (n = 2)
8 0 0 0 0 0 0 (n = 1)

n = 13, k = 1
1 1 1 1 1 | 1 1 1 1 1 | 1 1 1 (n = 13)
2 0 2 0 2 | 0 2 0 2 0 | 2 0 1 (n = 7)
4 0 0 0 4 | 0 0 0 4 0 | 0 0 1 (n = 4)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 1 (n = 3)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 2 0 (n = 3)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 2 0 1 (n = 4)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 2 0 1 1 (n = 5)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 2 0 2 0 (n = 4)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 4 0 0 0 (n = 3)
8 0 0 0 0 | 0 0 0 8 0 | 0 0 0 0 0 0 (n = 2)
16 0 0 0 0 | 0 0 0 0 0 | 0 0 0 0 0 0 (n = 1)

n = 13, k = 2
1 1 1 1 1 | 1 1 1 1 1 | 1 1 1 (n = 13)
2 0 2 0 2 | 0 2 0 2 0 | 2 0 1 (n = 7)
4 0 0 0 4 | 0 0 0 4 0 | 0 0 1 (n = 4)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 1 (n = 3)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 2 0 (n = 3)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 2 0 1 (n = 4)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 2 0 1 1 (n = 5)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 2 0 2 0 (n = 4)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 4 0 0 0 (n = 3)
8 0 0 0 0 | 0 0 0 8 0 | 0 0 0 0 0 0 (n = 2)

-> n보다 작은 2의 제곱수 중 제일 큰 제곱수를 뺌 ( 13 - 8 = n, k-- )
-> 만약 k가 0보다 크다면 위의 작업 다시 -> ( 5 - 4 = n, k-- )
-> k가 0이면, 출력 값은 이전 n을 마이너스한 값 마이너스 현재의 n 단, n의 값이 0이라면 -1을 출력

n = 13, k = 3
1 1 1 1 1 | 1 1 1 1 1 | 1 1 1 (n = 13)
2 0 2 0 2 | 0 2 0 2 0 | 2 0 1 (n = 7)
4 0 0 0 4 | 0 0 0 4 0 | 0 0 1 (n = 4)
8 0 0 0 0 | 0 0 0 4 0 | 0 0 1 (n = 3)

-> n보다 작은 2의 제곱수 중 제일 큰 제곱수를 뺌 ( 13 - 8 = n, k-- )
-> 만약 k가 0보다 크다면 위의 작업 다시 -> ( 5 - 4 = n, k-- )
-> 만약 k가 0보다 크다면 위의 작업 다시 -> ( 1 - 1 = n, k-- )
-> k가 0이면, 출력 값은 이전 n을 마이너스한 값 마이너스 현재의 n 단, n의 값이 0이라면 -1을 출력